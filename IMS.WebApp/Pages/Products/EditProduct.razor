@page "/editProduct/{ProdId:int}"

@inject NavigationManager navigation
@inject IViewProductByIdUseCase viewProductByIdUseCase
@inject IEditProductUseCase editProductUseCase

<h3>EditProduct</h3>
<br />
<EditForm Model="product" OnValidSubmit="SaveProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText id="name" @bind-Value="product.ProductName"
                   class="form-control" >
                   </InputText>
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="product.Quantity"
                   class="form-control" >
                   </InputNumber>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="product.Price"
                   class="form-control" >
                   </InputNumber>
    </div>
    <div class="form-group">
        <label for="invs">Inventories</label>
        <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>


</EditForm>


@code {
    [Parameter]
    public int ProdId{ get; set; }

    private Product product = new Product();

    protected override async Task OnParametersSetAsync()
    {
        this.product = await viewProductByIdUseCase.ExecuteAsync(this.ProdId);
    }

    private async Task SaveProduct()
    {
       await editProductUseCase.ExecuteAsync(this.product);
       navigation.NavigateTo("/products");
    }

    private void Cancel()
    {
        navigation.NavigateTo("/products");
    }
}
